// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// surv_est
NumericVector surv_est(NumericVector times, NumericVector probs, NumericVector newtimes);
RcppExport SEXP _obliqueRSF_surv_est(SEXP timesSEXP, SEXP probsSEXP, SEXP newtimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type newtimes(newtimesSEXP);
    rcpp_result_gen = Rcpp::wrap(surv_est(times, probs, newtimes));
    return rcpp_result_gen;
END_RCPP
}
// innerprod
double innerprod(NumericVector x, NumericVector y);
RcppExport SEXP _obliqueRSF_innerprod(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(innerprod(x, y));
    return rcpp_result_gen;
END_RCPP
}
// moving_average
NumericVector moving_average(NumericVector a);
RcppExport SEXP _obliqueRSF_moving_average(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(moving_average(a));
    return rcpp_result_gen;
END_RCPP
}
// colmeans
NumericVector colmeans(NumericMatrix input_mat);
RcppExport SEXP _obliqueRSF_colmeans(SEXP input_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type input_mat(input_matSEXP);
    rcpp_result_gen = Rcpp::wrap(colmeans(input_mat));
    return rcpp_result_gen;
END_RCPP
}
// pick_node
String pick_node(double wt, double cut_pnt, CharacterVector options);
RcppExport SEXP _obliqueRSF_pick_node(SEXP wtSEXP, SEXP cut_pntSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< double >::type cut_pnt(cut_pntSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(pick_node(wt, cut_pnt, options));
    return rcpp_result_gen;
END_RCPP
}
// which_trees
NumericVector which_trees(NumericVector vec, List forest);
RcppExport SEXP _obliqueRSF_which_trees(SEXP vecSEXP, SEXP forestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< List >::type forest(forestSEXP);
    rcpp_result_gen = Rcpp::wrap(which_trees(vec, forest));
    return rcpp_result_gen;
END_RCPP
}
// predict_orsf
NumericMatrix predict_orsf(List forest, NumericMatrix newx, NumericVector times);
RcppExport SEXP _obliqueRSF_predict_orsf(SEXP forestSEXP, SEXP newxSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type forest(forestSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type newx(newxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_orsf(forest, newx, times));
    return rcpp_result_gen;
END_RCPP
}
// predict_ost
NumericMatrix predict_ost(List ostree, NumericMatrix newx, NumericVector times);
RcppExport SEXP _obliqueRSF_predict_ost(SEXP ostreeSEXP, SEXP newxSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type ostree(ostreeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type newx(newxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_ost(ostree, newx, times));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_obliqueRSF_surv_est", (DL_FUNC) &_obliqueRSF_surv_est, 3},
    {"_obliqueRSF_innerprod", (DL_FUNC) &_obliqueRSF_innerprod, 2},
    {"_obliqueRSF_moving_average", (DL_FUNC) &_obliqueRSF_moving_average, 1},
    {"_obliqueRSF_colmeans", (DL_FUNC) &_obliqueRSF_colmeans, 1},
    {"_obliqueRSF_pick_node", (DL_FUNC) &_obliqueRSF_pick_node, 3},
    {"_obliqueRSF_which_trees", (DL_FUNC) &_obliqueRSF_which_trees, 2},
    {"_obliqueRSF_predict_orsf", (DL_FUNC) &_obliqueRSF_predict_orsf, 3},
    {"_obliqueRSF_predict_ost", (DL_FUNC) &_obliqueRSF_predict_ost, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_obliqueRSF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
