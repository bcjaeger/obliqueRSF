% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oblique_survival_forest_fit.R
\name{ORSF}
\alias{ORSF}
\title{Grow an oblique random survival forest (ORSF)}
\usage{
ORSF(data, time = "time", status = "status", features = NULL,
  nmin = 5, nsplit = 10, minsplit = 30,
  mtry = ceiling(sqrt(ncol(data) - 2)), nmin_leaf = 1, alpha = 0.01,
  use.cv = TRUE, maxdf_lincombo = if (use.cv) NULL else 5,
  ntree = 100, verbose = TRUE, importance = FALSE,
  tree.err = FALSE)
}
\arguments{
\item{data}{The data used to grow the forest.}

\item{time}{A character value indicating the name of the column in the data that measures time.}

\item{status}{A character value indicating the name of the column in the data that measures participant status. A value of zero indicates censoring and a value of 1 indicates that the event occurred.}

\item{features}{A character vector giving the names of columns in the data set that will be used as features. If NULL, then all of the variables in the data apart from the time and status variable are treated as features. None of these names should contain special characters or spaces.}

\item{nmin}{The minimum number of events required to split a node.}

\item{nsplit}{The number of random cut-points assessed for each variable.}

\item{minsplit}{The minimum number of observations required to split a node.}

\item{mtry}{Number of variables randomly selected as candidates for splitting a node. The default is ceiling(sqrt(p)), where p is the number of features.}

\item{nmin_leaf}{The minimum number of events required for a leaf node.}

\item{alpha}{The elastic net mixing parameter. A value of 1 gives the lasso penalty, and a value of 0 gives the ridge penalty.}

\item{use.cv}{if TRUE, then cross-validation is used prior to splitting each node in order to identify optimal values of lambda, a hyper-parameter in penalized regression.}

\item{maxdf_lincombo}{This argument is ignored if cross-validation is applied, i.e. if use.cv=TRUE. The maximum number of degrees of freedom used by penalized regression models.}

\item{ntree}{The number of trees to grow.}

\item{verbose}{If verbose=TRUE, then the ORSF function will print output to console while it grows the tree.}

\item{importance}{(Not yet implemented) if TRUE, variable importance is computed using axis based random survival forests.}

\item{tree.err}{(Not yet implemented) if TRUE, then out-of-bag error is computed after each new tree is grown.}
}
\value{
An oblique random survival forest.
}
\description{
Grow an oblique random survival forest (ORSF)
}
\examples{

data("pbc",package='survival')
pbc$status[pbc$status>=1]=pbc$status[pbc$status>=1]-1
pbc$id=NULL
fctrs<-c('trt','ascites','spiders','edema','hepato','stage')
for(f in fctrs)pbc[[f]]=as.factor(pbc[[f]])
pbc=na.omit(pbc)

orsf=ORSF(data=pbc,ntree=15,minsplit=75)
}
